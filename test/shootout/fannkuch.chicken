;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;; contributed by Dima Dorfman, 2004
;;; slightly improved by Sven Hartrumpf, 2005-2006

(define (command-line-arguments) '())
(define (argv) '(#f "7"))

(define (add1 i) (+ i 1))
(define (sub1 i) (- i 1))

(define vector-for-each (lambda (pred v)
  (do ((i 0 (add1 i))
       (v-length (vector-length v)))
      ((>= i v-length))
    (pred (vector-ref v i)))))

(define (vector-reverse-slice! v i j)
  (do ((i i (add1 i))
       (j (sub1 j) (sub1 j))) ; exclude position j
      ((<= j i))
    (vector-swap! v i j)))

(define (vector-swap! v i j)
  (let ((t (vector-ref v i)))
    (vector-set! v i (vector-ref v j))
    (vector-set! v j t)))

(define (count-flips pi)
  (do ((rho (vector-copy pi))
       (i 0 (add1 i)))
      ((= (vector-ref rho 0) 0) i)
    (vector-reverse-slice! rho 0 (add1 (vector-ref rho 0)))))

(define (vector-copy v)
  (let* ((len (vector-length v))
         (new-v (make-vector len)))
    (letrec ((loop (lambda (n)
                     (if (< n len)
                         (begin (vector-set! new-v n (vector-ref v n))
                                (loop (+ n 1)))
                         new-v))))
      (loop 0))))

(define (fannkuch n)
  (let ((pi (do ((pi (make-vector n))
                 (i 0 (add1 i)))
              ((= i n) pi)
              (vector-set! pi i i)))
        (r n)
        (count (make-vector n)))
    (letrec ((loop (lambda (flips perms)
      (cond ((< perms 30) (vector-for-each (lambda (x)
                                             (display (add1 x)))
                                           pi)
             (newline)))
      (do ()
        ((= r 1))
        (vector-set! count (sub1 r) r)
        (set! r (sub1 r)))
      (let ((flips2 (max (count-flips pi) flips)))
        (let ((result
                (letrec ((loop2 (lambda ()
                  (if (= r n)
                    flips2
                    (let ((perm0 (vector-ref pi 0)))
                      (do ((i 0))
                        ((>= i r))
                        (let ((j (add1 i)))
                          (vector-set! pi i (vector-ref pi j))
                          (set! i j)))
                      (vector-set! pi r perm0)
                      (vector-set! count r (sub1 (vector-ref count r)))
                      (cond ((<= (vector-ref count r) 0)
                             (set! r (add1 r))
                             (loop2))
                            (else
                              #f)))))))
                  (loop2))))
          (or result
              (loop flips2 (add1 perms)))
          )))))
      (loop 0 0))))

(define (main args)
  (if (< (length args) 2)
    (begin (display "An argument is required") (newline) 2)
    (let ((n (string->number (cadr args))))
      (if (not (integer? n))
        (begin (display "An integer is required") (display n) (newline) 2)
        (let ((result (fannkuch n)))
          (display "Pfannkuchen(") (display n) (display ") = ") (display result) (display "\n"))))))

(main (argv))
