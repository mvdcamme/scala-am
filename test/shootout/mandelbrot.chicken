;;; The Computer Language Benchmarks Game
;;; http://shootout.alioth.debian.org/
;;;
;;; contributed by Anthony Borla

(define (command-line-arguments) '())
(define (argv) '())

(define +limit-sqr+ 4.0)

(define (add1 x) (+ x 1))

(define +iterations+ 50)

(define (mandelbrot iterations x y n)
  (let ((cr (- (/ (* 2.0 x) n) 1.5)) (ci (- (/ (* 2.0 y) n) 1.0)))
    (letrec ((loop (lambda (i zr zi)
                     (let ((zrq (* zr zr)) (ziq (* zi zi)))
                       (cond
                         ((> i iterations) 1)
                         ((> (+ zrq ziq) +limit-sqr+) 0)
                         (else (loop (add1 i) (+ (- zrq ziq) cr) (+ (* 2.0 zr zi) ci))))))))
      (loop 0 0.0 0.0))))

(define (main args)
  (let ((n (if (null? args)
               1
               (string->number (car args))))

        (bitnum 0)
        (byteacc 0))

    (display (string-append "P4\n" (number->string n) " " (number->string n)))

    (letrec ((loop-y (lambda (y)
                       (if (> y (- n 1)) '()
                           ; else
                           (begin
                             (letrec ((loop-x (lambda (x)
                                                (if (> x (- n 1)) '()
                                                    ; else
                                                    (begin
                                                      (set! bitnum (add1 bitnum))
                                                      (set! byteacc (+ (* 2 byteacc) (mandelbrot +iterations+ x y n)))

                                                      (cond
                                                        ((= bitnum 8)
                                                         (display (integer->char byteacc))
                                                         (set! bitnum 0)
                                                         (set! byteacc 0))

                                                        ((= x (- n 1))
                                                         (display (integer->char (* byteacc (expt 2 (- 8 (modulo n 8))))))
                                                         (set! bitnum 0)
                                                         (set! byteacc 0)))

                                                      (loop-x (add1 x)) )))))
                               (loop-x 0))
                             (loop-y (add1 y)) )))))
      (loop-y 0) )))

(main (command-line-arguments))

