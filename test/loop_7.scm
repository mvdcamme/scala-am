(define (fill-vector! lambda-fun vector)
  (define (fill-vector-iter! i vector)
    (cond ((= i (vector-length vector)) vector)
          (else (vector-set! vector i (lambda-fun i))
                (fill-vector-iter! (+ i 1) vector))))
  (fill-vector-iter! 0 vector))

(define (make-matrix x y l)
  (let ((matrix-data (make-vector x (make-vector y))))
    (define (set-matrix! x y value)
      (vector-set! (vector-ref matrix-data x) y value))
    (define (get-matrix x y)
      (vector-ref (vector-ref matrix-data x) y))
    (define (dispatch msg)
      (cond ((eq? msg 'set!) set-matrix!)
            ((eq? msg 'get) get-matrix)
            ((eq? msg 'show) (display matrix-data)))) 
    (fill-vector! (lambda (i) (make-vector y (l))) matrix-data)
    dispatch))

(define (make-coin x y)
  (define (dispatch msg)
      (cond ((eq? msg 'get-x) x)
            ((eq? msg 'get-y) y)))
  dispatch)

(define down-key 0)
(define left-key 1)
(define right-key 2)

(define rows 6)
(define cols 7)
(define MAX_LOOP_ITERATIONS 10)

(define global-min 0)
(define global-max (- cols 1))
(define global-current 0)
(define game-board (make-matrix rows cols (lambda () 0)))

(define (enter-keyboard-input)
  (random 3))
  ;0)

;(define (error msg)
;  (display msg) (newline))
   
(define (find-first col)
  (define (find-first-iter col r)
    (let ((tile ((game-board 'get) r col)))
      (cond 
        ((not (eq? tile 0)) (- r 1))
        ((= r (- rows 1)) r)
        (else (find-first-iter col (+ r 1))))))
  (find-first-iter col 0))
    
(define (drop-coin)
      (let ((row (find-first global-current)))
        (if (>= row 0)
            (let ((new-coin (make-coin global-current row)))
              ((game-board 'set!) row global-current  new-coin)))))

(define (arrow-left)
  (if (> global-current global-min)
      (set! global-current (- global-current 1))
      'ok))
(define (arrow-right)
  (if (< global-current global-max)
      (set! global-current (+ global-current 1))
      (error "current coordinate above max")))
      
(define (on-key rt)
  (cond ((= rt down-key) (drop-coin))
        ((= rt left-key) (arrow-left))
        ((= rt right-key) (arrow-right))
        (else (#f rt))))
    
(define (start)
  (define (main-loop main-loop-n)
    (if (> main-loop-n 0)
        (begin (on-key (enter-keyboard-input))
               (main-loop (- main-loop-n 1)))))
  (main-loop MAX_LOOP_ITERATIONS))

(start)