(define result '())
(define display (lambda (i) (set! result (cons i result))))
(define newline (lambda () (set! result (cons 'newline result))))

(define (print-abc a b c)
  (display a) (display " ")
  (display b) (display " ")
  (display c) (newline))

(define (foo a b c)
  (print-abc a b c)
  (let ((a 4)
        (c 5)
        (b c))
    (print-abc a b c)
    (let ((b 6)
          (c a))
      (print-abc a b c))
    (let ((a b)
          (c a))
      (print-abc a b c)))
  (print-abc a b c))

(foo 1 2 3)
(equal? result '(newline 3 " " 2 " " 1 newline 4 " " 3 " " 3 newline 4 " " 6 " " 4 newline 5 " " 3 " " 4 newline 3 " " 2 " " 1))