(define (require pred)
  (if (not pred)
      (amb)
      'whatever))

(define (member el lst)
  (cond ((null? lst) #f)
        ((eq? el (car lst)) (car lst))
        (else (member el (cdr lst)))))

(define (distinct? items)
  (cond ((null? items) #t)
        ((null? (cdr items)) #t)
        ((member (car items) (cdr items)) #f)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require (distinct? (cons baker (cons cooper (cons fletcher (cons miller (cons smith '())))))))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (or (= (- smith fletcher) 1)
                      (= (- smith fletcher) -1))))
    (require (not (or (= (- fletcher cooper) 1)
                      (= (- fletcher cooper) -1))))
    (display (+ (* baker 10000) (* cooper 1000) (* fletcher 100) (* miller 10) smith))
    (amb)))

(multiple-dwelling)