The following code is in Scheme-with-Actors. No implementation of this language
exists, but it can be easily run on Racket provided the following macros:

(define log-thread (thread (lambda ()
                             (let loop ()
                               (printf "~a" (thread-receive))
                               (loop)))))

(define-syntax self
  (syntax-id-rules ()
    [self (current-thread)]))
(define-syntax-rule (send act msg arg1 ...)
  (thread-send act (cons 'msg (list arg1 ...))))
(define-syntax bind-lists
  (syntax-rules ()
    [(bind-lists (x y ...) l body ...)
     (let ((x (car l)))
       (bind-lists (y ...) (rest l) body ...))]
    [(bind-lists () l body ...)
     (begin body ...)]))
(define-syntax-rule (actor name (state ...) (msg (arg ...) body ...) ...)
  (lambda (m state ...)
    (log "actor ~a received ~a~n" name m)
    (case (car m)
      ((msg) (bind-lists (arg ...) (cdr m) body ...))
      ...)))
(define-syntax-rule (become act v1 ...)
  (begin
    (log "becoming ~a with ~a~n" act (list v1 ...))
    (act (thread-receive) v1 ...)))
(define-syntax-rule (log fmt v ...)
  (thread-send log-thread (format fmt v ...)))
(define-syntax-rule (terminate)
  (begin
    (log "terminating ~a~n" (current-thread))
    (kill-thread (current-thread))))
(define-syntax-rule (create act v1 ...)
  (begin
    (log "creating ~a with ~a ~n" act (list v1 ...))
    (thread (lambda () (act (thread-receive) v1 ...)))))
